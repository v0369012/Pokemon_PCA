n_vector <- c(1,1)
n_vector[i+2] <-n_vector[i]+n_vector[i+1]
}
if(n==1){
return(n_vector_for1)
}
if(n==2){
return(n_vector_for2)
}
else{
return(cat(n_vector))
}
}
get_fibo(6)
# Q3
get_fibo <- function(n){
for (i in 1:n) {
n_vector_for1 <- 1
n_vector_for2 <- c(1,1)
n_vector <- c(1,1)
n_vector[i+2] <-n_vector[i]+n_vector[i+1]
}
if(n==1){
return(n_vector_for1)
}
if(n==2){
return(n_vector_for2)
}
else{
return(n_vector)
}
}
get_fibo(6)
get_fibo(1)
get_fibo(2)
get_fibo <- function(n){
for (i in 1:n) {
n_vector_for1 <- 1
n_vector_for2 <- c(1,1)
n_vector <- c(1,1)
n_vector[i+2] <-n_vector[i]+n_vector[i+1]
}
if(n==1){
return(n_vector_for1)
}
if(n==2){
return(n_vector_for2)
}
if(n>2){
return(n_vector)
}
}
get_fibo(5)
# Q3
get_fibo <- function(n){
n_vector_for1 <- 1
n_vector_for2 <- c(1,1)
for (i in 1:n) {
n_vector <- c(1,1)
n_vector[i+2] <-n_vector[i]+n_vector[i+1]
}
if(n==1){
return(n_vector_for1)
}
if(n==2){
return(n_vector_for2)
}
if(n>2){
return(n_vector)
}
}
get_fibo(5)
# Q3
get_fibo <- function(n){
n_vector_for1 <- 1
n_vector_for2 <- c(1,1)
for (i in 1:(n-2)) {
n_vector <- c(1,1)
n_vector[i+2] <-n_vector[i]+n_vector[i+1]
}
if(n==1){
return(n_vector_for1)
}
if(n==2){
return(n_vector_for2)
}
if(n>2){
return(n_vector)
}
}
get_fibo(5)
# Q3
get_fibo <- function(n){
n_vector_for1 <- 1
n_vector_for2 <- c(1,1)
for (i in 3:n) {
n_vector <- c(1,1)
n_vector[i] <-n_vector[i-2]+n_vector[i-1]
}
if(n==1){
return(n_vector_for1)
}
if(n==2){
return(n_vector_for2)
}
if(n>2){
return(n_vector)
}
}
get_fibo(5)
get_fibo(8)
for (i in 3:n) {
n_vector <- c(1,1)
n_vector[i] <-n_vector[i-2]+n_vector[i-1]
}
# Q3
get_fibo <- function(n){
n_vector_for1 <- 1
n_vector_for2 <- c(1,1)
n <- as.integer(n)
for (i in 3:n) {
n_vector <- c(1,1)
n_vector[i] <-n_vector[i-2]+n_vector[i-1]
}
if(n==1){
return(n_vector_for1)
}
if(n==2){
return(n_vector_for2)
}
if(n>2){
return(n_vector)
}
}
get_fibo(8)
# Q2
get_fac <- function(n){
if (is.integer(n)){
n_fac <- factorial(n)
ans_fac <- paste("The factorial of", n, "is", n_fac)
return(ans_fac)}
else{
return("Sorry, factorial does not exist for negative numbers")
}
}
get_fac(-1)
get_fac(0)
get_fac(2)
is.integer(6)
is.double(6)
is.double(-1)
is.double(0)
is.double(0.5)
# Q2
get_fac <- function(n){
if (n>=0){
n_fac <- factorial(n)
ans_fac <- paste("The factorial of", n, "is", n_fac)
return(ans_fac)}
else{
return("Sorry, factorial does not exist for negative numbers")
}
}
get_fac(6)
get_fac(-2)
install.packages("ttutils")
library(ttutils)
isInteger(6)
isInteger(0)
isInteger(2.0)
isInteger(2.8)
# Q2
get_fac <- function(n){
library(ttutils)
if (isInteger(n)){
n_fac <- factorial(n)
ans_fac <- paste("The factorial of", n, "is", n_fac)
return(ans_fac)}
else{
return("Sorry, factorial does not exist for negative numbers")
}
}
get_fac(-2)
# Q2
get_fac <- function(n){
library(ttutils)
if (isInteger(n) && n>=0){
n_fac <- factorial(n)
ans_fac <- paste("The factorial of", n, "is", n_fac)
return(ans_fac)}
else{
return("Sorry, factorial does not exist for negative numbers")
}
}
get_fac(-2)
get_fac(2.3)
get_fac(0)
# Q3
get_fibo <- function(n){
n_vector_for1 <- 1
n_vector_for2 <- c(1,1)
n <- as.numeric(n)
for (i in 3:n) {
n_vector <- c(1,1)
n_vector[i] <-n_vector[i-2]+n_vector[i-1]
}
if(n==1){
return(n_vector_for1)
}
if(n==2){
return(n_vector_for2)
}
if(n>2){
return(n_vector)
}
}
get_fibo(6)
for (i in 3:n) {
n_vector <- c(1,1)
n_vector[i] <-n_vector[i-2]+n_vector[i-1]
}
3:6
# Q3
get_fibo <- function(n){
n_vector_for1 <- 1
n_vector_for2 <- c(1,1)
n_vector <- c(1,1)
for (i in 3:n) {
n_vector[i] <-n_vector[i-2]+n_vector[i-1]
}
if(n==1){
return(n_vector_for1)
}
if(n==2){
return(n_vector_for2)
}
if(n>2){
return(n_vector)
}
}
get_fibo(6)
get_fibo(11)
performance_data <- matrix(Num, scores_A, scores_B, scores_C)
Num <- 1:5
scores_A <- c(76,88,92,82,72)
scores_B <- c(73,84,82,91,74)
scores_C <- c(85,76,92,85,73)
performance_data <- matrix(Num, scores_A, scores_B, scores_C)
View(performance_data)
performance_data <- data.frame(Num, scores_A, scores_B, scores_C)
View(performance_data)
ANS <- lapply(performance_data, mean)
View(ANS)
ANS_sum <- lapply(performance, sum)
ANS_sum <- lapply(performance_data, sum)
View(ANS_sum)
rm(ANS)
performance_data <- data.frame(Num, scores_A, scores_B, scores_C) %>% t() %>% as.data.frame()
View(performance_data)
performance_data <- data.frame(scores_A, scores_B, scores_C) %>% t() %>% as.data.frame()
ANS_mean <- lapply(performance_data, mean)
ANS_sum <- lapply(performance_data, sum)
View(ANS_mean)
View(ANS_sum)
ANS_mean <- sapply(performance_data, mean)
ANS_sum <- sapply(performance_data, sum)
max(ANS_mean)
View(performance_data)
which(ANS_mean, ANS_mean==max(performance_data))
which(ANS_mean==max(performance_data))
which(Num==2)
which(ANS_mean==max(ANS_mean))
colnames(performance_data)[which(ANS_mean==max(ANS_mean))]
install.packages("shiny")
install.packages("DBI")
install.packages("dplyr")
install.packages("dbplyr")
devtools::install_github("rstudio/pool")
library(pool)
library("Rcpp", lib.loc="D:/R-3.6.1/library")
remove.packages("Rcpp")
devtools::install_github("rstudio/pool")
install.packages("C:/Users/user/Downloads/Rcpp_1.0.3.tar.gz", repos = NULL, type = "source")
devtools::install_github("rstudio/pool")
install.packages("C:/Users/user/Downloads/Rcpp_1.0.3.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/user/Downloads/Rcpp_1.0.3.tar.gz", repos = NULL, type = "source")
# 先下載Rtools35.exe才能安裝Rcpp
devtools::install_github("rstudio/pool")
install.packages("rlang")
# 先下載Rtools35.exe才能成功安裝Rcpp
devtools::install_github("rstudio/pool")
install.packages("backports")
# 先下載Rtools35.exe才能成功安裝Rcpp
# 手動安裝rlang, backports
devtools::install_github("rstudio/pool")
install.packages("digest")
# 先下載Rtools35.exe才能成功安裝Rcpp
# 手動安裝rlang, backports
devtools::install_github("rstudio/pool")
library(pool)
library(dplyr)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "jjz-db",
host = "35.229.250.48",
username = "jjz",
password = "v0v3v6v9"
)
install.packages("RMySQL")
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "jjz-db",
host = "35.229.250.48",
username = "jjz",
password = "v0v3v6v9"
)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shop",
host = "35.229.250.48",
username = "jjz",
password = "v0v3v6v9"
)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shop",
host = "35.229.250.48",
username = "jjz",
password = "v0v3v6v9"
)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shop",
host = "35.229.250.48",
username = "jjz",
password = "v0v3v6v9"
)
View(my_db)
my_db %>% tbl("City") %>% head(5)
dbReadTable(my_db, name = "shop")
dbListTables(my_db)
dbDisconnect(my_db)
DBI::dbDisconnect(my_db)
factorial(2)
factorial(3)
combn(3,2)
choose(3,2)
choose(3,1)
choose(4,2)
2/3
choose(6,2)
15*0.783333
11.75/15
install.packages('blogdown')
blogdown::install_hugo()
remove.packages("xfun")
install.packages("xfun")
if (!requireNamespace("devtools")) install.packages('devtools')
devtools::install_github('rstudio/blogdown')
install.packages("C:/Users/user/Downloads/xfun_0.13.zip", repos = NULL, type = "win.binary")
blogdown::install_hugo()
blogdown::update_hugo()
blogdown::hugo_version()
shiny::runApp('C:/Users/user/Desktop/shiny_db')
mysqlconnection = dbConnect(MySQL(),
user = 'jjz',
password = 'v0v3v6v9',
dbname = 'orders',
host = '204.2.63.19',
port = 20755)
dbListTables(mysqlconnection)
# result = dbSendQuery(mysqlconnection, "select * from customers")
result = dbGetQuery(mysqlconnection, "select * from customers")
View(result)
runApp('C:/Users/user/Desktop/shiny_db')
mysqlconnection = dbConnect(MySQL(),
user = 'jjz',
password = 'v0v3v6v9',
dbname = 'DB_test',
host = '204.2.63.19',
port = 20755)
dbListTables(mysqlconnection)
# result = dbSendQuery(mysqlconnection, "select * from customers")
# data.frame = fetch(result, n = 5)
# print(data.frame)
result = dbGetQuery(mysqlconnection, "select * from new_table")
View(result)
shiny::runApp('C:/Users/user/Desktop/shiny_db')
install.packages("renv")
a <- 1
b <- 2
c <- 3
stop()
d <- 4
stop()
stop("now")
pause()
install.packages("bazar")
bazar::pause()
a <- 1
b <- 2
c <- 3
bazar::pause()
a <- 1
b <- 2
c <- 3
bazar::pause()
a <- "ERR4656740_ERR4656740_L001_R1_001.fastq.gz"
library(stringr)
a <- "ERR4656740_ERR4656740_L001_R1_001.fastq.gz"
b <- "ERR4656740_ERR4656740_L001_R1.fastq.gz"
library(stringr)
str_detect()
str_detect(a, ".+_.+_L[0-9][0-9][0-9]_R[12]_[0-9][0-9][0-9]\\.")
c <- "1_ERR4656740_ERR4656740_L001_R1_001.fastq.gz"
str_detect(c, ".+_.+_L[0-9][0-9][0-9]_R[12]_[0-9][0-9][0-9]\\.")
str_detect(b, ".+_.+_L[0-9][0-9][0-9]_R[12]_[0-9][0-9][0-9]\\.")
str_detect(b, "_.+_R{0,1}[12]\\.")
d <- "ERR4656740_R1.fastq.gz"
str_detect(d, "_.+_R{0,1}[12]\\.") # TRUE
str_detect(b, "((?!SCREEN).)*_R{0,1}[12]\\.") # TRUE
str_detect(b, "((?!\\_).)*_R{0,1}[12]\\.") # TRUE
str_detect(b, "^((?!\\_).)*$_R{0,1}[12]\\.") # TRUE
str_detect(d, "^((?!\\_).)*$_R{0,1}[12]\\.") # FALSE
str_detect(b, "^[^<>]*$_R{0,1}[12]\\.") # TRUE
str_detect("<", "^[^<>]*$")
str_detect("k", "^[^<>]*$")
str_detect("<k", "^[^<>]*$")
str_detect("_", "^[^\\_]*$")
str_detect("SS", "^[^\\_]*$")
str_detect(b, "^[^\\_]*$_R{0,1}[12]\\.") # TRUE
str_detect(d, "^[^\\_]*$_R{0,1}[12]\\.") # FALSE
str_detect(b, "^[^\\_]*$_R{0,1}[12]\\.") # TRUE
str_detect(b, "[^\\_]*_R{0,1}[12]\\.") # FALSE
str_detect(d, "[^\\_]*_R{0,1}[12]\\.") # FALSE
str_detect("SS_", "^[^\\_]*$")
str_detect("SS", "^[^\\_]*$")
str_detect("S_S", "^[^\\_]*$")
str_detect("_S_S", "^[^\\_]*$")
str_detect("_SS", "^[^\\_]*$")
str_count(d, "_")
str_count(c(a,d), "_")
require(rpart)
iris_train <- iris[1:120,]
iris_test <- iris[120:150,]
cart_model <- rpart(Species ~., data = iris_train)
install.packages("rpart.plot")
require(rpart.plot)
prp(cart_model,         # 模型
faclen=0,           # 呈現的變數不要縮寫
fallen.leaves=TRUE, # 讓樹枝以垂直方式呈現
shadow.col="gray",  # 最下面的節點塗上陰影
# number of correct classifications / number of observations in that node
extra=2)
pred <- predict(cart_model, newdata=iris_test, type="class")
table(real=iris_test$Species, predict=pred)
confus_matrix <- table(real=iris_test$Species, predict=pred)
sum(diag(confus_matrix))/sum(confus_matrix) # 對角線的數量/總數量
getwd()
packageName <- "randomForest"
if(!(packageName %in% rownames(installed.packages()))) {
install.packages("randomForest")
}
library("randomForest")
data(iris)
set.seed(111)
# 建立抽樣樣本
# 1 表示為訓練資料
# 2 表示為測試資料
ind <- sample(2, nrow(iris), replace = TRUE, prob = c(0.8, 0.2))
sample(2, nrow(iris), replace = TRUE, prob = c(0.8, 0.2))
iris[ind == 1,]
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
iris.rf
iris.pred <- predict(iris.rf, iris[ind==2,])
iris.pred
table(observed=iris[ind==2,"Species"], predicted = iris.pred)
importance(iris.rf)
varImpPlot(iris.rf, sort = TRUE)
?pca()
?princomp()
cars
mcars
mtcars
mtcars3
mtcars_1 <- data.frame(Sample = rownames(mtcars), mtcars)
View(mtcars_1)
a <- princomp(Sample ~ .)
a <- princomp(Sample ~ ., data = mtcars_1)
a <- princomp(Sample ~., data = mtcars_1)
View(mtcars_1)
a <- princomp(Sample ~ mpg + cly , data = mtcars_1)
a <- princomp( ~ mpg + cly , data = mtcars_1)
a <- princomp( ~ mpg + cyl , data = mtcars_1)
a$scores
a <- princomp( ~. , data = mtcars_1)
a <- princomp( ~ mpg + cyl , data = mtcars_1)
a$scores
a$center
a$sdev
a$loadings
a$scale
a$call
a$n.obs
dim(mtcars_1)
a
?prcomp
setwd("~/GitHub/Pokemon_PCA")
setwd("~/GitHub/Pokemon_PCA")
getwd()
knitr::opts_chunk$set(echo = TRUE)
PKM_values_7 <- readLines("Pokemon_list_g7.txt", encoding = "UTF-8")
