View(ANS)
ANS_sum <- lapply(performance, sum)
ANS_sum <- lapply(performance_data, sum)
View(ANS_sum)
rm(ANS)
performance_data <- data.frame(Num, scores_A, scores_B, scores_C) %>% t() %>% as.data.frame()
View(performance_data)
performance_data <- data.frame(scores_A, scores_B, scores_C) %>% t() %>% as.data.frame()
ANS_mean <- lapply(performance_data, mean)
ANS_sum <- lapply(performance_data, sum)
View(ANS_mean)
View(ANS_sum)
ANS_mean <- sapply(performance_data, mean)
ANS_sum <- sapply(performance_data, sum)
max(ANS_mean)
View(performance_data)
which(ANS_mean, ANS_mean==max(performance_data))
which(ANS_mean==max(performance_data))
which(Num==2)
which(ANS_mean==max(ANS_mean))
colnames(performance_data)[which(ANS_mean==max(ANS_mean))]
install.packages("shiny")
install.packages("DBI")
install.packages("dplyr")
install.packages("dbplyr")
devtools::install_github("rstudio/pool")
library(pool)
library("Rcpp", lib.loc="D:/R-3.6.1/library")
remove.packages("Rcpp")
devtools::install_github("rstudio/pool")
install.packages("C:/Users/user/Downloads/Rcpp_1.0.3.tar.gz", repos = NULL, type = "source")
devtools::install_github("rstudio/pool")
install.packages("C:/Users/user/Downloads/Rcpp_1.0.3.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/user/Downloads/Rcpp_1.0.3.tar.gz", repos = NULL, type = "source")
# 先下載Rtools35.exe才能安裝Rcpp
devtools::install_github("rstudio/pool")
install.packages("rlang")
# 先下載Rtools35.exe才能成功安裝Rcpp
devtools::install_github("rstudio/pool")
install.packages("backports")
# 先下載Rtools35.exe才能成功安裝Rcpp
# 手動安裝rlang, backports
devtools::install_github("rstudio/pool")
install.packages("digest")
# 先下載Rtools35.exe才能成功安裝Rcpp
# 手動安裝rlang, backports
devtools::install_github("rstudio/pool")
library(pool)
library(dplyr)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "jjz-db",
host = "35.229.250.48",
username = "jjz",
password = "v0v3v6v9"
)
install.packages("RMySQL")
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "jjz-db",
host = "35.229.250.48",
username = "jjz",
password = "v0v3v6v9"
)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shop",
host = "35.229.250.48",
username = "jjz",
password = "v0v3v6v9"
)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shop",
host = "35.229.250.48",
username = "jjz",
password = "v0v3v6v9"
)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shop",
host = "35.229.250.48",
username = "jjz",
password = "v0v3v6v9"
)
View(my_db)
my_db %>% tbl("City") %>% head(5)
dbReadTable(my_db, name = "shop")
dbListTables(my_db)
dbDisconnect(my_db)
DBI::dbDisconnect(my_db)
factorial(2)
factorial(3)
combn(3,2)
choose(3,2)
choose(3,1)
choose(4,2)
2/3
choose(6,2)
15*0.783333
11.75/15
install.packages('blogdown')
blogdown::install_hugo()
remove.packages("xfun")
install.packages("xfun")
if (!requireNamespace("devtools")) install.packages('devtools')
devtools::install_github('rstudio/blogdown')
install.packages("C:/Users/user/Downloads/xfun_0.13.zip", repos = NULL, type = "win.binary")
blogdown::install_hugo()
blogdown::update_hugo()
blogdown::hugo_version()
shiny::runApp('C:/Users/user/Desktop/shiny_db')
mysqlconnection = dbConnect(MySQL(),
user = 'jjz',
password = 'v0v3v6v9',
dbname = 'orders',
host = '204.2.63.19',
port = 20755)
dbListTables(mysqlconnection)
# result = dbSendQuery(mysqlconnection, "select * from customers")
result = dbGetQuery(mysqlconnection, "select * from customers")
View(result)
runApp('C:/Users/user/Desktop/shiny_db')
mysqlconnection = dbConnect(MySQL(),
user = 'jjz',
password = 'v0v3v6v9',
dbname = 'DB_test',
host = '204.2.63.19',
port = 20755)
dbListTables(mysqlconnection)
# result = dbSendQuery(mysqlconnection, "select * from customers")
# data.frame = fetch(result, n = 5)
# print(data.frame)
result = dbGetQuery(mysqlconnection, "select * from new_table")
View(result)
shiny::runApp('C:/Users/user/Desktop/shiny_db')
install.packages("renv")
a <- 1
b <- 2
c <- 3
stop()
d <- 4
stop()
stop("now")
pause()
install.packages("bazar")
bazar::pause()
a <- 1
b <- 2
c <- 3
bazar::pause()
a <- 1
b <- 2
c <- 3
bazar::pause()
a <- "ERR4656740_ERR4656740_L001_R1_001.fastq.gz"
library(stringr)
a <- "ERR4656740_ERR4656740_L001_R1_001.fastq.gz"
b <- "ERR4656740_ERR4656740_L001_R1.fastq.gz"
library(stringr)
str_detect()
str_detect(a, ".+_.+_L[0-9][0-9][0-9]_R[12]_[0-9][0-9][0-9]\\.")
c <- "1_ERR4656740_ERR4656740_L001_R1_001.fastq.gz"
str_detect(c, ".+_.+_L[0-9][0-9][0-9]_R[12]_[0-9][0-9][0-9]\\.")
str_detect(b, ".+_.+_L[0-9][0-9][0-9]_R[12]_[0-9][0-9][0-9]\\.")
str_detect(b, "_.+_R{0,1}[12]\\.")
d <- "ERR4656740_R1.fastq.gz"
str_detect(d, "_.+_R{0,1}[12]\\.") # TRUE
str_detect(b, "((?!SCREEN).)*_R{0,1}[12]\\.") # TRUE
str_detect(b, "((?!\\_).)*_R{0,1}[12]\\.") # TRUE
str_detect(b, "^((?!\\_).)*$_R{0,1}[12]\\.") # TRUE
str_detect(d, "^((?!\\_).)*$_R{0,1}[12]\\.") # FALSE
str_detect(b, "^[^<>]*$_R{0,1}[12]\\.") # TRUE
str_detect("<", "^[^<>]*$")
str_detect("k", "^[^<>]*$")
str_detect("<k", "^[^<>]*$")
str_detect("_", "^[^\\_]*$")
str_detect("SS", "^[^\\_]*$")
str_detect(b, "^[^\\_]*$_R{0,1}[12]\\.") # TRUE
str_detect(d, "^[^\\_]*$_R{0,1}[12]\\.") # FALSE
str_detect(b, "^[^\\_]*$_R{0,1}[12]\\.") # TRUE
str_detect(b, "[^\\_]*_R{0,1}[12]\\.") # FALSE
str_detect(d, "[^\\_]*_R{0,1}[12]\\.") # FALSE
str_detect("SS_", "^[^\\_]*$")
str_detect("SS", "^[^\\_]*$")
str_detect("S_S", "^[^\\_]*$")
str_detect("_S_S", "^[^\\_]*$")
str_detect("_SS", "^[^\\_]*$")
str_count(d, "_")
str_count(c(a,d), "_")
require(rpart)
iris_train <- iris[1:120,]
iris_test <- iris[120:150,]
cart_model <- rpart(Species ~., data = iris_train)
install.packages("rpart.plot")
require(rpart.plot)
prp(cart_model,         # 模型
faclen=0,           # 呈現的變數不要縮寫
fallen.leaves=TRUE, # 讓樹枝以垂直方式呈現
shadow.col="gray",  # 最下面的節點塗上陰影
# number of correct classifications / number of observations in that node
extra=2)
pred <- predict(cart_model, newdata=iris_test, type="class")
table(real=iris_test$Species, predict=pred)
confus_matrix <- table(real=iris_test$Species, predict=pred)
sum(diag(confus_matrix))/sum(confus_matrix) # 對角線的數量/總數量
getwd()
packageName <- "randomForest"
if(!(packageName %in% rownames(installed.packages()))) {
install.packages("randomForest")
}
library("randomForest")
data(iris)
set.seed(111)
# 建立抽樣樣本
# 1 表示為訓練資料
# 2 表示為測試資料
ind <- sample(2, nrow(iris), replace = TRUE, prob = c(0.8, 0.2))
sample(2, nrow(iris), replace = TRUE, prob = c(0.8, 0.2))
iris[ind == 1,]
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
iris.rf
iris.pred <- predict(iris.rf, iris[ind==2,])
iris.pred
table(observed=iris[ind==2,"Species"], predicted = iris.pred)
importance(iris.rf)
varImpPlot(iris.rf, sort = TRUE)
?pca()
?princomp()
cars
mcars
mtcars
mtcars3
mtcars_1 <- data.frame(Sample = rownames(mtcars), mtcars)
View(mtcars_1)
a <- princomp(Sample ~ .)
a <- princomp(Sample ~ ., data = mtcars_1)
a <- princomp(Sample ~., data = mtcars_1)
View(mtcars_1)
a <- princomp(Sample ~ mpg + cly , data = mtcars_1)
a <- princomp( ~ mpg + cly , data = mtcars_1)
a <- princomp( ~ mpg + cyl , data = mtcars_1)
a$scores
a <- princomp( ~. , data = mtcars_1)
a <- princomp( ~ mpg + cyl , data = mtcars_1)
a$scores
a$center
a$sdev
a$loadings
a$scale
a$call
a$n.obs
dim(mtcars_1)
a
?prcomp
setwd("~/GitHub/Pokemon_PCA")
PKM_values_7
# Read Pokemon list
PKM_values_7 <- readLines("Pokemon_list_g7.txt", encoding = "UTF-8")
str_count(PKM_values_7, "\\|") == 8
# Remove
library(tidyverse)
str_count(PKM_values_7, "\\|") == 8
str_count(PKM_values_7, "\\|")
PKM_values_7
PKM_without_spf <- str_count(PKM_values_7, "\\|") == 8 # Pokemons without specail form
# Read Pokemon list
PKM_values_7 <- readLines("Pokemon_list_g7.txt", encoding = "UTF-8")
# Remove Pokemons with special form
library(tidyverse)
PKM_without_spf <- str_count(PKM_values_7, "\\|") == 8 # Pokemons without specail form
PKM_values_7_without_spf <- PKM_values_7[PKM_without_spf]
PKM_values_7_without_spf_split <- str_split(PKM_values_7_without_spf, "\\|")
seq(2, 792*9, 9)
# Make a Pokemon table
PKM_values_7_without_spf_df <- data.frame(
Number = unlist(PKM_values_7_without_spf_split)[seq(2, 792*9, 9)],
Name = unlist(PKM_values_7_without_spf_split)[seq(3, 792*9, 9)],
generation = c(rep(1, 151-0), rep(2, 251-151), rep(3, 385-251), rep(4, 490-385), rep(5, 640-490), rep(6, 707-640), rep(7, 792-707)),
HP = unlist(PKM_values_7_without_spf_split)[seq(4, 792*9, 9)] %>% as.character() %>% as.numeric(),
ATK = unlist(PKM_values_7_without_spf_split)[seq(5, 792*9, 9)] %>% as.character() %>% as.numeric(),
DEF = unlist(PKM_values_7_without_spf_split)[seq(6, 792*9, 9)] %>% as.character() %>% as.numeric(),
SATK = unlist(PKM_values_7_without_spf_split)[seq(7, 792*9, 9)] %>% as.character() %>% as.numeric(),
SDEF = unlist(PKM_values_7_without_spf_split)[seq(8, 792*9, 9)] %>% as.character() %>% as.numeric(),
SPEED = unlist(PKM_values_7_without_spf_split)[seq(9, 792*9, 9)] %>% str_replace_all("\\}","") %>% as.character() %>% as.numeric()
)
View(PKM_values_7_without_spf_df)
unique(PKM_values_7_t_df[,1])
unique(PKM_values_7_without_spf_df[,1])
# Check the correlation between the variables
library(reshape2)
head(melt(cor(PKM_values_7_without_spf_df[, 3:ncol(PKM_values_7_without_spf_df)])), 5)
ggplot(melt(cor(PKM_values_7_without_spf_df[, 3:ncol(PKM_values_7_without_spf_df)])),
aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient2(low = "firebrick4", high = "steelblue",
mid = "white", midpoint = 0) +
guides(fill=guide_legend(title="Correlation")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank())
names(pca.model)
# PCA
pca.model <- prcomp(PKM_values_7_without_spf_df[, 3:ncol(PKM_values_7_without_spf_df)], T)
names(pca.model)
summary(pca.model)
# Make a pca table to plot
p1_p2_table <- pca.model$x[,1:2] %>% as.data.frame()
rownames(p1_p2_table) <- PKM_values_7_without_spf_df[,1]
p1_p2_table_var <- cbind(p1_p2_table,
Number = unlist(PKM_values_7_without_spf_split)[seq(2, 792*9, 9)],
Name = unlist(PKM_values_7_without_spf_split)[seq(3, 792*9, 9)],
generation = c(rep(1, 151-0), rep(2, 251-151), rep(3, 385-251), rep(4, 490-385), rep(5, 640-490), rep(6, 707-640), rep(7, 792-707))
)
p1_p2_table_var[,5] <- as.character(p1_p2_table_var[,5])
# Visualization
pca_gg <- ggplot(data = p1_p2_table_var, aes(x=PC1, y=PC2, label = Number, color = generation))+
geom_point(size = 2.5)
# User-interactive visualization
library(plotly)
pca_ggly <- ggplotly(pca_gg)
pca_ggly
ggplot(data = p1_p2_table_var, aes(x=PC1, y=PC2, label = Number))+
geom_point(size = 2.5)
# label with first types
pca_gg_types1 <- ggplot(data = p1_p2_table_var, aes(x=PC1, y=PC2, label = Number, color = types1))+
geom_point(size = 2.5)
# label with legend Pokemon
pca_gg_legend <- ggplot(data = p1_p2_table_var, aes(x=PC1, y=PC2, label = Number, color = legend))+
geom_point(size = 2.5)
pca_gg_legend
p1_p2_table_var
p1_p2_table_var %>% head()
# Address types table
PKM_types_7 <- readLines("Pokemon_types.txt")
PKM_types_7_number <- c()
for (i in 1:876) {
PKM_types_7_number[i] <- str_split(PKM_types_7, "\\|")[[i]][[3]]
}
PKM_types_7_name <- c()
for (i in 1:876) {
PKM_types_7_name[i] <- str_split(PKM_types_7, "\\|")[[i]][[4]]
}
PKM_types_7_name_t <- PKM_types_7_name[PKM_types_7_number_without_letters][str_detect(PKM_types_7_number, "[a-zA-Z]")==F]
# Remove Pokemon number with letters
position_without_letters <- str_detect(PKM_types_7_number, "^[0-9]*$")
PKM_types_7_number_without_letters <- PKM_types_7_number[position_without_letters]
PKM_types_7_name_t <- PKM_types_7_name[PKM_types_7_number_without_letters][str_detect(PKM_types_7_number, "[a-zA-Z]")==F]
PKM_types_7_types1 <- c()
for (i in 1:876) {
PKM_types_7_types1[i] <- str_split(PKM_types_7, "\\|")[[i]][[6]]
}
PKM_types_7_types1_t <- PKM_types_7_types1[PKM_types_7_number_without_letters] %>% str_remove_all("\\}")
PKM_types_7_types1_t
PKM_types_7_name_t
PKM_types_7_number
PKM_types_7_number_without_letters
str_split(PKM_types_7, "\\|")
PKM_types_7_name <- c()
for (i in 1:876) {
PKM_types_7_name[i] <- str_split(PKM_types_7, "\\|")[[i]][[4]]
}
PKM_types_7_name
PKM_types_7_number_without_letters
PKM_types_7_name[PKM_types_7_number_without_letters]
PKM_types_7_number_without_letters
PKM_types_7_name
PKM_types_7_number_without_letters <- PKM_types_7_number[position_without_letters] %>% as.numeric()
PKM_types_7_number_without_letters
PKM_types_7_name_t <- PKM_types_7_name[PKM_types_7_number_without_letters][str_detect(PKM_types_7_number, "[a-zA-Z]")==F]
PKM_types_7_name_t
str_detect(PKM_types_7_number, "[a-zA-Z]")
PKM_types_7_number
PKM_types_7_number_without_letters
# Remove Pokemon number with letters
position_without_letters <- str_detect(PKM_types_7_number, "^[0-9]*$")
PKM_types_7_number_without_letters <- PKM_types_7_number[position_without_letters]
PKM_types_7_number_without_letters
PKM_types_7_name <- c()
for (i in 1:876) {
PKM_types_7_name[i] <- str_split(PKM_types_7, "\\|")[[i]][[4]]
}
PKM_types_7_name
PKM_types_7_number
PKM_types_7_name <- c()
for (i in 1:876) {
PKM_types_7_name[i] <- str_split(PKM_types_7, "\\|")[[i]][[4]]
}
PKM_types_7_types1 <- c()
for (i in 1:876) {
PKM_types_7_types1[i] <- str_split(PKM_types_7, "\\|")[[i]][[6]] %>% str_remove_all("\\}")
}
PKM_types_7_df <- data.frame(
Number = PKM_types_7_number,
Name = PKM_types_7_name,
types1 = PKM_types_7_type1
)
PKM_types_7_df <- data.frame(
Number = PKM_types_7_number,
Name = PKM_types_7_name,
types1 = PKM_types_7_types1
)
PKM_types_7_df
View(PKM_types_7_df)
PKM_types_7_df_t <- filter(PKM_types_7_df, Number %in% PKM_types_7_number_without_letters)
PKM_types_7_df_t
# Merge Pokemon table and types table by number
PKM_merged_df <- merge(PKM_types_7_df_t, PKM_values_7_without_spf_df, by = "Number")
PKM_merged_df
# Remove Chinese names
PKM_merged_df <- PKM_merged_df[,-4]
colnames(PKM_merged_df)[2] <- "Name"
head(melt(cor(PKM_merged_df[, 3:ncol(PKM_merged_df)])), 5)
PKM_merged_df
head(melt(cor(PKM_values_7_without_spf_df[, 5:ncol(PKM_values_7_without_spf_df)])))
head(melt(cor(PKM_merged_df[, 5:ncol(PKM_merged_df)])))
# Plot heatmap
ggplot(melt(cor(PKM_merged_df[, 5:ncol(PKM_merged_df)])),
aes(Var1, Var2)) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient2(low = "firebrick4", high = "steelblue",
mid = "white", midpoint = 0) +
guides(fill=guide_legend(title="Correlation")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title = element_blank())
# PCA
pca.model <- prcomp(PKM_merged_df[, 5:ncol(PKM_merged_df)], T)
# Show pca summary
summary(pca.model)
pca.model$rotation
# Make a pca table to plot
p1_p2_table <- pca.model$x[,1:2] %>% as.data.frame()
rownames(p1_p2_table) <- PKM_merged_df[,1]
legend_number <- c(144:146, 150:151,
243:245, 249:251,
377:386,
479:494,
638:649,
716:721,
785:809
)
p1_p2_table <- cbind(p1_p2_table,
Number = PKM_merged_df[, "Number"],
Name = PKM_merged_df[, "Name"],
generation = PKM_merged_df["generation"],
types1 = PKM_merged_df[, "types1"],
legend = legend
)
# Make a pca table to plot
p1_p2_table <- pca.model$x[,1:2] %>% as.data.frame()
rownames(p1_p2_table) <- PKM_merged_df[,1]
legend_number <- c(144:146, 150:151,
243:245, 249:251,
377:386,
479:494,
638:649,
716:721,
785:809
)
p1_p2_table_t <- cbind(p1_p2_table,
Number = PKM_merged_df[, "Number"],
Name = PKM_merged_df[, "Name"],
generation = PKM_merged_df["generation"],
types1 = PKM_merged_df[, "types1"],
legend = legend
)
PKM_merged_df[, "Number"]
PKM_merged_df[, "Name"]
PKM_merged_df[, "Number"]
PKM_merged_df[, "Name"]
PKM_merged_df["generation"]
PKM_merged_df
PKM_merged_df[, "Number"]
PKM_merged_df[, "Name"]
PKM_merged_df["generation"]
PKM_merged_df[, "types1"]
legend
legend <- rep(F, nrow(p1_p2_table))
legend_position <- which(p1_p2_table[, "Number"] %in% legend_number)
p1_p2_table[, "Number"]
p1_p2_table
nrow(p1_p2_table)
legend_position <- which(PKM_merged_df[, "Number"] %in% legend_number)
legend[legend_position] <- rep(T, length(legend_position))
p1_p2_table_t <- cbind(p1_p2_table,
Number = PKM_merged_df[, "Number"],
Name = PKM_merged_df[, "Name"],
generation = PKM_merged_df["generation"],
types1 = PKM_merged_df[, "types1"],
legend = legend
)
p1_p2_table_t
p1_p2_table_t[, "generation"] <- as.character(p1_p2_table_t[, "generation"])
# Visualization
# label with generation
pca_gg <- ggplot(data = p1_p2_table_t, aes(x=PC1, y=PC2, label = Number))+
geom_point(size = 2.5)
pca_gg
# label with generation
pca_gg_generation <- ggplot(data = p1_p2_table_t, aes(x=PC1, y=PC2, label = Number, color = generation))+
geom_point(size = 2.5)
pca_gg_generation
# label with first types
pca_gg_types1 <- ggplot(data = p1_p2_table_t, aes(x=PC1, y=PC2, label = Number, color = types1))+
geom_point(size = 2.5)
# label with legend Pokemon
pca_gg_legend <- ggplot(data = p1_p2_table_var, aes(x=PC1, y=PC2, label = Number, color = legend))+
geom_point(size = 2.5)
pca_gg_legend
pca_ggly <- ggplotly(pca_gg)
pca_ggly
